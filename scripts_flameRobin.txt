-- DOMINIOS
create domain "DM_CODIGO" Integer not null;
create domain "DM_DESCRICAO" Varchar(40);
create domain "DM_NOME" Varchar(40);
create domain "DM_QTDE" Numeric(8,3);
create domain "DMVALOR" Numeric(8,2);



-- CRIAR TABELAS COM DOMINIOS COMO ATRIBUTOS
create table grupo_produtos(
    codigo DM_CODIGO,
    descricao DM_DESCRICAO
);

create table produtos(
    codigo DM_CODIGO,
    descricao DM_DESCRICAO,
    valor DM_VALOR,
    cod_grupo_produtos integer
);

-- criar a coluna estoque em produtos
alter table produtos add estoque integer;


create table cliente(
	codigo DM_CODIGO,
	nome DM_NOME,
	data_nascimento date
);

create table pedido(
	codigo DM_CODIGO,
	data_pedido date,
	cod_cliente integer,
	constraint pk_codigo_pedido primary key (codigo)
);

create table item_pedido(
	codigo DM_CODIGO,
	item integer not null,
	cod_produto integer,
	quantidade integer
);

create table fornecedor(
	codigo int,
	nome varchar(50),
	data_fundacao varchar(11)
);




-- PRIMARY KEYS
alter table grupo_produtos
add constraint pk_codigo_grupo_produtos
primary key (codigo);

alter table produtos
add constraint pk_codigo_produtos
primary key (codigo);

alter table cliente
add constraint pk_codigo_cliente
primary key (codigo);



-- CHAVE COMPOSTA
alter table item_pedido
add constraint pk_codigo_pedido_item
primary key (codigo, item);



-- FOREIGN KEY
alter table produtos
add constraint fk_cod_grupo_produto
foreign key (cod_grupo_produtos)
references grupo_produtos(codigo);



-- INSERIR DADOS NAS TABELAS
insert into grupo_produtos (codigo, descricao) values (1,'padaria');
insert into grupo_produtos (codigo, descricao) values (2,'acougue');
insert into grupo_produtos (codigo, descricao) values (3,'hortifruti');

insert into produtos (codigo, descricao, valor, cod_grupo_produtos) values (1,'picanha',54.50,3);
insert into produtos (codigo, descricao, valor, cod_grupo_produtos) values (2,'bolo de fuba',6.80,1);
insert into produtos (codigo, descricao, valor, cod_grupo_produtos) values (3,'cenoura',4.35,3);
insert into produtos (codigo, descricao, valor, cod_grupo_produtos) values (4,'pao frances',5.00,1);
insert into produtos (codigo, descricao, valor, cod_grupo_produtos) values (5,'frango congelado',11.20,2);
insert into produtos (codigo, descricao, valor, cod_grupo_produtos) values (6,'alcatra',16.50,2);
insert into produtos (codigo, descricao, valor, cod_grupo_produtos) values (7,'pepino',3.76,3);
insert into produtos (codigo, descricao, valor, cod_grupo_produtos) values (8,'alho',12,3);
insert into produtos (codigo, descricao, valor, cod_grupo_produtos) values (9,'bomba de chocolate',1.80,1);

insert into pedido (codigo, data_pedido, cod_cliente) values (1, '08/05/2022', 1);
insert into pedido (codigo, data_pedido, cod_cliente) values (2, '08/05/2022', 2);

insert into item_pedido (codigo, item, cod_produto, quantidade) values (1, 1, 2, 12);
insert into item_pedido (codigo, item, cod_produto, quantidade) values (1, 2, 2, 12);
insert into item_pedido (codigo, item, cod_produto, quantidade) values (1, 3, 2, 12);
insert into item_pedido (codigo, item, cod_produto, quantidade) values (2, 1, 2, 12);
insert into item_pedido (codigo, item, cod_produto, quantidade) values (2, 2, 2, 12);

insert into cliente (codigo, nome, data_nascimento) values (1, 'Daniel', '08/03/1975');
insert into cliente (codigo, nome, data_nascimento) values (2, 'Luciano', '06/03/1999');
insert into cliente (codigo, nome, data_nascimento) values (3, 'Jose', '08/12/1975');
insert into cliente (codigo, nome, data_nascimento) values (4, 'Alexandre', '03/12/1998');
insert into cliente (codigo, nome, data_nascimento) values (5, 'Marcelo', '05/08/1965');
insert into cliente (codigo, nome, data_nascimento) values (6, 'Antonio', '05/05/1978');
insert into cliente (codigo, nome, data_nascimento) values (7, 'Joao', '07/08/1975');
insert into cliente (codigo, nome, data_nascimento) values (8, 'Danilo', '08/06/1993');
insert into cliente (codigo, nome, data_nascimento) values (9, 'Luciana', '09/05/1999');
insert into cliente (codigo, nome, data_nascimento) values (10, 'Joseane', '11/06/1965');
insert into cliente (codigo, nome, data_nascimento) values (11, 'Alex', '03/03/1998');
insert into cliente (codigo, nome, data_nascimento) values (12, 'Marcela', '05/08/1969');
insert into cliente (codigo, nome, data_nascimento) values (13, 'Antonieta', '05/05/1988');
insert into cliente (codigo, nome, data_nascimento) values (14, 'Joana', '10/08/1995');
insert into cliente (codigo, nome, data_nascimento) values (15, 'Junior', '10/10/1998');

insert into fornecedor values (1, 'SORVETERIA', '05-20-1999');
insert into fornecedor values (2, 'SUPERMERCADO', '10-29-2000');
insert into fornecedor values (3, 'PANIFICADORA', '12-25-2000');
insert into fornecedor values (4, 'DROGARIA', '11-15-2001');




-- SELECT
select * from cliente; -- * seleciona todos os campos
select cliente.nome from cliente;
select cliete.nome, cliente.data_nascimento from cliente;
select * from grupo_produtos, produtos; -- seleciona os produtos correspondentes aos grupos incorretamente

select * from grupo_produtos, produtos
where grupo_produtos.codigo = produtos.cod_grupo_produtos; -- seleciona os produtos correspondentes aos grupos corretamente

select * from produtos
where produtos.codigo >= 1
and produtos.codigo <= 5;

select * from cliente
where cliente.nome like '%se';

select * from cliente
where cliente.nome like 'Jo%';

select * from cliente
where cliente.nome like '%an%';

/* 
    ----------------------------  
	OPERADORES DE COMPARAÇÃO:
    ----------------------------
	<> - Diferente
	=  - Igual
	>  - Maior
	<  - Menor
	>= - Maior ou Igual
	<= - Menor ou Igual


    ----------------------------  
	OPERADORES LÓGICOS:
    ----------------------------
	AND - Se todas as condições forem TRUE
	OR  - Se pelo menos uma das condições forem TRUE


    ----------------------------  
	MASCARAS DO LIKE:
    ----------------------------
	%Texto - Retorna todos os valores que completam a consulta ANTES do %
	Texto% - Retorna todos os valores que completam a consulta DEPOIS do %
	%Texto% - Retorna todos os valores que completam a consulta ENTRE do %
*/



-- UPDATE
update produtos
set produtos.valor = 5.56
where produtos.codigo = 3;

update produtos
set produtos.descricao = 'Pão Italiano'
where produtos.codigo = 4;

update produtos 
set produtos.descricao = 'frango resfriado',
produtos.valor = 12.87
where produtos.codigo = 5;

update produtos set estoque = 10
where produtos.codigo <> 3;

update produtos set estoque = 0
where produtos.codigo = 3;




-- DELETE
delete from cliente
where cliente.nome like '%an%';

delete from cliente
where data_nascimento >= '01/01/1999';

delete from produtos;



-- ORDER BY
select * from cliente
order by cliente.data_nascimento;

select * from cliente
order by cliente.NOME, cliente.data_nascimento;

select * from grupo_produtos, produtos
where grupo_produtos.codigo = produtos.cod_grupo_produtos
order by grupo_produtos.descricao, produtos.descricao;

select * from produtos
order by produtos.valor desc; -- ordena o valor de maneira decrescente (> para o <)

select * from produtos
order by produtos.valor asc; -- ordena o valor de maneira crescente (< para o >)



-- FIRST
select first 3 * from produtos
order by produtos.valor desc; -- seleciona os 3 produtos mais caros

select first 3 * from produtos
order by produtos.valor asc; -- seleciona os 3 produtos mais baratos

select first 5 nome from cliente order by nome; -- seleciona os 5 primeiros registros em ordem alfabetica



-- IN
select * from cliente
where codigo in(1,8,11);

select * from produtos
where produtos.descricao in('picanha', 'cenoura', 'alcatra');



-- BETWEEN
select * from cliente
where cliente.data_nascimento between '08-03-1975' and '01-01-1980'; -- seleciona os registos entre as datas

select * from produtos
where produtos.valor between 5.0 and 10.0; -- seleciona os registros entre os valores

select * from cliente
where cliente.nome not between 'A' and 'G';


-- GENERATOR
create generator inc_produto;
set generator inc_produto to 9; -- vai auto incrementar conforme a trigger produtos_bi for executada na criação de um novo produto


-- TRIGGER
set term ^;
create trigger produtos_bi /* bi significa que o gatilho vai ser before insert */ for produtos 
active before insert position 0
as
begin
	-- coloco o que a trigger vai executar aqui
	new.codigo = gen_id(inc_produto,1); -- = 9 + 1

end^

set term;^

insert into produtos (
	descricao, 
	valor, 
	cod_grupo_produtos
) values (
	'fraldinha',
	22.80,
	2
); -- testando a trigger




-- EXCEPTION
create exception exc_cliente_padrao 'cliente padrão não pode ser excluido';

-- cria a trigger que executa a exception
set term ^ ;
create trigger trg__exc_cliente_bd for cliente 
active before delete position 0
as
begin
	if(old.codigo = 15) then
	exception exc_cliente_padrao; -- -- chama a exception
end
end
^
set term ; ^

-- testando a exception tentando excluir o cliente do codigo 15
delete from cliente
where cliente.codigo = 15;

----------------------------------------------------------------------------------

create exception exc_produto_estoque 'produto em estoque, impossivel excluir';

set term ^;
create trigger trg_exc_produto_estoque_bd for produtos
active before delete position 0
as
begin
	if(old.estoque > 0) then
	exception exc_produto_estoque; -- chama a exception
end
^
set term ; ^

-- testando a exception
delete from produtos
where produtos.codigo = 2; -- não será apagado


delete from produtos
where produtos.codigo = 3; -- será apagado




-- JOIN
select * from produtos
join grupo_produtos on grupo_produtos.codigo = produtos.cod_grupo_produtos;

select * from produtos
left join grupo_produtos on grupo_produtos.codigo = produtos.cod_grupo_produtos;

select * from produtos
right join grupo_produtos on grupo_produtos.codigo = produtos.cod_grupo_produtos;

select * from produtos
inner join grupo_produtos on grupo_produtos.codigo = produtos.cod_grupo_produtos;




-- ALIAS
select 
	c.codigo, 
	c.nome, 
	c.data_nascimento
from cliente c;

select 
	p.codigo, 
	p.descricao
from produtos p;

select 
	p.codigo as cod_produto, 
	p.descricao as produto, 
	gp.codigo as cod_grupo_produtos, 
	gp.descricao as grupo_produto
from produtos p, grupo_produtos gp
where p.cod_grupo_produtos = gp.codigo;




-- UNION
select 
	codigo, 
	nome, 
	data, 
	tipo
from (
	select 
		c.codigo as codigo, 
		c.nome as nome, 
		c.data_nascimento as data, 
		'cliente' as tipo
	from cliente c

	union 

	select 
		f.codigo as codigo, 
		f.nome as nome, 
		f.data_fundacao as data, 
		'fornecedor' as tipo
	from fornecedor f
)
order by nome;



-- EXTRACT
select * from cliente c
where extract (month from c.data_nascimento) between 3 and 6;

select * from cliente c
where extract (month from c.data_nascimento) = 5
and extract (day from c.data_nascimento) = 5;

select c.nome as nome, c.data_nascimento as data_nasc,
(
extract (year from current_date) - extract (year from c.data_nascimento)
) as idade
from cliente c
order by data_nasc desc; -- calcular idade com base no ano atual e o ano de nascimento

/*
------------------------
FILTROS PARA O EXTRACT
------------------------
year = 1 a 9999 integer
month = 1 a 12 integer
week = 1 a 53 integer
day = 1 a 31 integer
weekday = 0 a 6 (0 = domingo) integer
yearday = 0 a 365 (0 = 1 de janeiro) integer
hour = 0 a 23 integer
minute = 0 a 59 integer
second = 0.0000 a 59.9999 numeric(9,4)
millisecond = 0.0 a 999.9 numeric(9,1)
*/